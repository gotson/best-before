plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'org.jreleaser' version '1.20.0'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'org.jetbrains.kotlin.jvm' version '2.2.0' apply false
    id 'com.google.devtools.ksp' version '2.2.0-2.0.2' apply false
}

nexusPublishing {
    repositories {
        // see https://central.sonatype.org/publish/publish-portal-ossrh-staging-api/#configuration
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

allprojects {
    group = 'com.github.gotson.bestbefore'

    apply plugin: 'java'
    apply plugin: 'com.github.ben-manes.versions'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation(platform('org.junit:junit-bom:5.13.4'))
        testImplementation('org.junit.jupiter:junit-jupiter')
        testRuntimeOnly('org.junit.platform:junit-platform-launcher')
        testImplementation 'org.assertj:assertj-core:3.27.3'
    }

    tasks.compileTestJava {
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    test {
        useJUnitPlatform()
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    tasks.named("dependencyUpdates").configure {
        rejectVersionIf {
            isNonStable(it.candidate.version)
        }
        gradleReleaseChannel = "current"
        checkConstraints = true
    }
}

wrapper {
    gradleVersion = '8.14.3'
    distributionType = Wrapper.DistributionType.ALL
}

jreleaser {
    project {
        description = 'BestBefore'
        copyright = 'Gauthier Roebroeck'
    }
    release {
        github {
            discussionCategoryName = 'Announcements'

            changelog {
                content = (file('./release_notes/release_notes.md').exists() ? '{{#f_file_read}}{{basedir}}/release_notes/release_notes.md{{/f_file_read}}' : '') +
                        '''
## Changelog

{{changelogChanges}}
{{changelogContributors}}
                        '''
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                skipMergeCommits = true
                links = true
                format = '- {{#commitIsConventional}}{{#conventionalCommitIsBreakingChange}}üö® {{/conventionalCommitIsBreakingChange}}{{#conventionalCommitScope}}**{{conventionalCommitScope}}**: {{/conventionalCommitScope}}{{conventionalCommitDescription}}{{#conventionalCommitBreakingChangeContent}}: *{{conventionalCommitBreakingChangeContent}}*{{/conventionalCommitBreakingChangeContent}} ({{commitShortHash}}){{/commitIsConventional}}{{^commitIsConventional}}{{commitTitle}} ({{commitShortHash}}){{/commitIsConventional}}{{#commitHasIssues}}, closes{{#commitIssues}} {{issue}}{{/commitIssues}}{{/commitHasIssues}}'
                hide {
                    uncategorized = true
                    contributors = ['[bot]', 'github-actions', 'GitHub']
                }
                excludeLabels = ['chore']
                category {
                    title = 'üèé Perf'
                    key = 'perf'
                    labels = ['perf']
                    order = 25
                }
                labeler {
                    label = 'perf'
                    title = 'regex:^(?:perf(?:\\(.*\\))?!?):\\s.*'
                    order = 120
                }
                extraProperties.put('categorizeScopes', true)
            }

            issues {
                enabled = true
                comment = 'üéâ This issue has been resolved in `{{tagName}}` ([Release Notes]({{releaseNotesUrl}}))'
                applyMilestone = 'ALWAYS'
                label {
                    name = 'released'
                    description = 'Issue has been released'
                    color = '#ededed'
                }
            }
        }
    }
}