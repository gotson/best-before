plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'org.jreleaser' version '1.8.0'
    id 'com.github.ben-manes.versions' version '0.50.0'
    id 'org.jetbrains.kotlin.jvm' version '1.9.24' apply false
    id 'com.google.devtools.ksp' version '1.9.10-1.0.13' apply false
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

allprojects {
    group = 'com.github.gotson.bestbefore'

    apply plugin: 'java'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
        testImplementation 'org.assertj:assertj-core:3.24.2'
    }

    tasks.compileTestJava {
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    test {
        useJUnitPlatform()
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }
}

wrapper {
    gradleVersion = '8.2.1'
    distributionType = Wrapper.DistributionType.ALL
}

jreleaser {
    project {
        description = 'BestBefore'
        copyright = 'Gauthier Roebroeck'
    }
    release {
        github {
            discussionCategoryName = 'Announcements'

            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                skipMergeCommits = true
                links = true
                format = '- {{#commitIsConventional}}{{#conventionalCommitIsBreakingChange}}üö® {{/conventionalCommitIsBreakingChange}}{{#conventionalCommitScope}}**{{conventionalCommitScope}}**: {{/conventionalCommitScope}}{{conventionalCommitDescription}}{{#conventionalCommitBreakingChangeContent}}: *{{conventionalCommitBreakingChangeContent}}*{{/conventionalCommitBreakingChangeContent}} ({{commitShortHash}}){{/commitIsConventional}}{{^commitIsConventional}}{{commitTitle}} ({{commitShortHash}}){{/commitIsConventional}}{{#commitHasIssues}}, closes{{#commitIssues}} {{issue}}{{/commitIssues}}{{/commitHasIssues}}'
                hide {
                    uncategorized = true
                    contributors = ['[bot]', 'github-actions', 'GitHub']
                }
                excludeLabels = ['chore']
                category {
                    title = 'üèé Perf'
                    key = 'perf'
                    labels = ['perf']
                    order = 25
                }
                labeler {
                    label = 'perf'
                    title = 'regex:^(?:perf(?:\\(.*\\))?!?):\\s.*'
                    order = 120
                }
                extraProperties.put('categorizeScopes', true)
            }

            issues {
                enabled = true
                comment = 'üéâ This issue has been resolved in `{{tagName}}` ([Release Notes]({{releaseNotesUrl}}))'
                applyMilestone = 'ALWAYS'
                label {
                    name = 'released'
                    description = 'Issue has been released'
                    color = '#ededed'
                }
            }
        }
    }
}